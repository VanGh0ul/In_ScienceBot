from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State,StatesGroup
from aiogram import types
from aiogram import types,Dispatcher
from create_bot import dp, bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove	
from openpyxl import Workbook
import openpyxl
import requests
import telebot
import json
import os

class FSMAdmin(StatesGroup):
	goal = State()
	name = State()
	card_view = State()

class FSMAdminGoal(StatesGroup):
	goal = State()

class FSMAdminDelete(StatesGroup):
	delete = State()


agentsName = ["",]
agentsID = ["",]

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞



async def cm_start(message : types.Message):
	await FSMAdmin.goal.set()
	await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:',reply_markup=types.ReplyKeyboardRemove())

#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def command_start(message : types.Message):

	try:
		keyboardStart = types.ReplyKeyboardMarkup(resize_keyboard=True)
		buttonbFindAgent = ["–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"]
		buttonsStart = ["–ü–æ–º–æ—â—å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
		buttonsFile = ["–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–ª–∏", "–£–¥–∞–ª–∏—Ç—å - —Ü–µ–ª—å –ø–æ –∏–Ω–¥–µ–∫—Å—É"]
		keyboardStart.add(*buttonsStart).add(*buttonbFindAgent).add(*buttonsFile)
		await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–πüí¨ \n–ù–∞–∂–º–∏—Ç–µ –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞üë®‚Äçüî¨ \n–î–∞–ª–µ–µ –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è!', reply_markup=keyboardStart)

	except:
		await message.reply('‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,—Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ :\nhttps://t.me/inscience_news')
		#await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É:\nhttp://t.me/IN_SCIENCEBot')



#–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞
def get_number_of_elements(list):
	count = 0
	for element in list:
		count += 1
		if count > 5:
			break
	return count

def init_search_log(client_id):

	file_path = "goal_data\\" + str(client_id) + ".xlsx"

	wb = None
	if (os.path.exists(file_path)):

		wb = openpyxl.load_workbook(file_path)

	else:
		wb = Workbook()

	ws = wb.active
	ws["A1"] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–∞–ª"
	ws["B1"] = "–¶–µ–ª—å –ø–æ–∏—Å–∫–∞"

	wb.save(file_path)


def append_client_info(client_id, column, val, is_family = False):

	file_path = "goal_data\\" + str(client_id) + ".xlsx"
	wb = openpyxl.load_workbook(file_path)

	ws = wb.active

	if (is_family):

		ws[column + str(len(ws[column]))] = val

	else:
		ws[column + str(len(ws[column]) + 1)] = val

	wb.save(file_path)

#–°–æ—Å—Ç–æ—è–Ω–∏–µ 1
#–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#@dp.message_handler(state=FSMAdmin.name)

async def select_goal(message : types.Message, state: FSMContext):
	async with state.proxy() as data:
		
		keyboardBack = types.ReplyKeyboardMarkup(resize_keyboard=True)
		buttonsFind = ["–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"]
		buttonsBack = ["–ú–µ–Ω—é"]
		keyboardBack.row(*buttonsFind).add(*buttonsBack)

		data['name'] = message.text
		if message.text.isdigit():
			await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', reply_markup=keyboardBack)
			await state.finish()
			return
		await FSMAdmin.next()
		await message.reply('–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:')

		client_id = message.from_user.id

		init_search_log(client_id)
		append_client_info(client_id, "B", message.text)


async def select_agent(message : types.Message, state: FSMContext):
	async with state.proxy() as data:

		keyboardBack = types.ReplyKeyboardMarkup(resize_keyboard=True)
		buttonsFind = ["–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"]
		buttonsBack = ["–ú–µ–Ω—é"]
		keyboardBack.row(*buttonsFind).add(*buttonsBack)

		data['name'] = message.text
		if message.text.isdigit():
			await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', reply_markup=keyboardBack)
			await state.finish()
			return

		url = "https://rinh-api.kovalev.team/employee/surname/"
		result = requests.get(url + data['name'])
		data = json.loads(result.content)

		parsName = "";
		parsID = "";
		countP = 1;
		item = 0

		#—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å –§–ò–û –∏ –∏–¥
		for item in data:
			
			parsName +=str(countP)+": - "+item["fullName"] + "\n"
			parsID = str(item["id"])
			agentsID.append(parsID)
			agentsName.append(parsName) 
			countP += 1
			if countP > 4:
				break
		#–µ—Å–ª–∏ –≤—Å–µ–≥–æ 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ –≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏
		if (len(agentsID) == 2):

			append_client_info(message.from_user.id, "A", message.text, True)

			messageToInt = 1 
			employee_url = "https://rinh-api.kovalev.team/statistic/employee/findByEmployeeId?employeeId="
			result = requests.get(employee_url + agentsID[messageToInt])

			resultJson = json.loads(result.content)

			data = resultJson["employee"]
			wos = resultJson["dataTable"][0]
			scopus = resultJson["dataTable"][1]
			rinz = resultJson["dataTable"][2]

			articlesCount = wos["articlesCount"]

			parsID = "";
			countP = 0;

			avatarUrl = data["avatarUrl"]
			parsName = "–ò–Ω–∏—Ü–∏–∞–ª—ã: " + str(data["fullName"])

			degree_url='https://rinh-api.kovalev.team/academic/degree/'
			title_url='https://rinh-api.kovalev.team/academic/title/'
			department_url='https://rinh-api.kovalev.team/department/'

			resultData =  {
				#"Id: ": data["id"],
				#"–£—á–µ–Ω–æ–µ –∑–≤–∞–Ω–∏–µ: ": data["academicTitleId"],
				#"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ": data["positionId"],
				"–û–±—â–∏–π —Å—Ç–∞–∂: ": data["commonWorkExperience"],
				"–°—Ç–∞–∂ –ø–æ —Å–ø–µ—Ü: ": data["specialtyWorkExperience"],
				"–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π –≤ Wos: ": wos["articlesCount"],
				"–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π –≤ Scopus: ": scopus["articlesCount"],
				"–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π –≤ Elibrary: ": rinz["articlesCount"],
				"Email: ": data["email"],
				"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ": data["phone"]
			}

			resultDataDegree = {}
			resultDataTitle = {}
			resultDataDepartment = {}
		
			#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—ã
			if (data["positionId"] is not None):
				department = requests.get(department_url + str(data["positionId"]))

				print(department.content)

				resultJsonDepartment = json.loads(department.content)

				resultDataDepartment["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: "] = resultJsonDepartment["shortName"];

			if (data["academicTitleId"] is not None):
				title = requests.get(title_url + str(data["academicTitleId"]))

				print(title.content)

				resultJsonTitle = json.loads(title.content)

				resultDataTitle["–£—á–µ–Ω–æ–µ –∑–≤–∞–Ω–∏–µ: "] = resultJsonTitle["name"];

			if (data["academicDegreeId"] is not None):
				degree = requests.get(degree_url + str(data["academicDegreeId"]))

				print(degree.content)

				resultJsonDegree = json.loads(degree.content)

				resultDataDegree["–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: "] = resultJsonDegree["shortName"];


			if (data["academicDegree2Id"] is not None):
				degree = requests.get(degree_url + str(data["academicDegree2Id"]))

				print(degree.content)
				
				resultJsonDegree = json.loads(degree.content)

				resultDataDegree["–í—Ç–æ—Ä–∞—è —É—á–µ–Ω–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: "] = resultJsonDegree["shortName"];


			replyMessage = "";
			replyMessageDegree = "";
			replyMessageTitle = "";
			replyMessageDepartment = "";

			#—Å–±–æ—Ä –Ω–µ –ø—É—Å—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
			for key in resultData.keys():
				if (resultData[key] is not None):
					replyMessage += key + str(resultData[key]) + "\n"\

			for key in resultDataTitle.keys():
				if (resultDataTitle[key] is not None):
					replyMessageTitle += key + str(resultDataTitle[key]) + "\n"

			for key in resultDataDepartment.keys():
				if (resultDataDepartment[key] is not None):
					replyMessageDepartment += key + str(resultDataDepartment[key]) + "\n"

			for key in resultDataDegree.keys():
				if (resultDataDegree[key] is not None):
					replyMessageDegree += key + str(resultDataDegree[key]) + "\n"

			#–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
			inScienceUrl ='https://inscience.kovalev.team/institutes/user/'+str(data["id"])
			stankinUrl = str(data["authorUrlProfile"])
			scopusUrl ='https://www.scopus.com/authid/detail.uri?authorId='+str(data["scopusAuthorId"])
			wosUrl ='https://www.webofscience.com/wos/author/record/'+str(data["wosAuthorId"])
			rinzUrl = 'https://www.elibrary.ru/author_items.asp?authorid='+str(data["rinzAuthorId"])

			#–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏
			try:
				media = types.MediaGroup()	
				media.attach_photo(avatarUrl, " \n"+
					"\n–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚öõÔ∏èüí´"+
					"\n\n"+
					parsName+
					"\n\n"+
					replyMessageDegree+
					replyMessageDepartment+
					replyMessageTitle+
					"\n"+
					replyMessage
				)
				await bot.send_media_group(message.from_user.id, media=media)
				await bot.send_message(message.from_user.id,'‚úîÔ∏è–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!', reply_markup=keyboardBack)

			#–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ —Ñ–æ—Ç–æ
			except:
				await message.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚öõüí´"+
					"\n\n"+
					parsName+
					"\n\n"+
					replyMessageDegree+
					replyMessageDepartment+
					replyMessageTitle+
					"\n"+
					replyMessage,
					reply_markup=keyboardBack
				)

			#–°–≤—è–∑–∞—Ç—å id —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
			inlineKb = types.InlineKeyboardMarkup(resize_keyboard=True)
			
			btn_inScienceUrl= types.InlineKeyboardButton(text='inScience', url=inScienceUrl)
			btn_stankinUrl= types.InlineKeyboardButton(text='–°—Ç–∞–Ω–∫–∏–Ω', url=stankinUrl)
			btn_Wos = types.InlineKeyboardButton(text='Wos', url=wosUrl)
			btn_Scopus= types.InlineKeyboardButton(text='Scopus',url=scopusUrl)
			btn_Rinz= types.InlineKeyboardButton(text='Elibrary',  url=rinzUrl)

			inlineKb.row(btn_inScienceUrl).row(btn_stankinUrl).row(btn_Wos).row(btn_Scopus).row(btn_Rinz)

			await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç—ã —Å—Ç–∞—Ç–µ–π.", reply_markup = inlineKb)

			await bot.send_document(chat_id=message.chat.id, document=open("goal_data\\" + str(message.from_user.id) + ".xlsx", "rb"))

			await FSMAdmin.next()

			#–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–∫–∏
			agentsName.clear()
			agentsID.clear()

			agentsID.append("",)
			agentsName.append("",) 

			await FSMAdmin.next()
		
		#–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ 1 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
		elif (len(agentsID) == 1):
			await message.reply("‚ùå–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",reply_markup=keyboardBack)
			await state.finish()

		#–µ—Å–ª–∏ –º–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ 2>
		elif (len(agentsID) > 2):
			
			listLenght = 5

			print("–∫–Ω–æ–ø–∫–∏ —Ñ–∏–æ–æ")
			await message.reply("‚ö†Ô∏è–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:")
			
			fieldBName = types.ReplyKeyboardMarkup(row_width=1)
			print(data)

			#–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ —Å —Ñ–∏–æ
			if (len(data) != 0):
				try:

					await bot.send_message(message.from_user.id, parsName)

					buttonsLength = listLenght
					
					if (len(data) < listLenght):
						buttonsLength = len(data)					

					fieldBName.add(*(types.KeyboardButton(data[i]["fullName"]) for i in range(buttonsLength)))
					await message.reply("‚úÖ–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º!", reply_markup=fieldBName)

					agentsName.clear()
					agentsID.clear()

					agentsID.append("",)
					agentsName.append("",) 

					await FSMAdmin.next()

				except BadRequest:
					await message.reply("–ê–≤—Ç–æ—Ä–æ–≤ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∏—Å–∫", reply_markup=types.ReplyKeyboardRemove())

			else:
				await message.reply("–ê–≤—Ç–æ—Ä–æ–≤ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–∞–π–¥–µ–Ω–æ –Ω–µ –±—ã–ª–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", reply_markup=types.ReplyKeyboardRemove())
			#await bot.send_message(message.from_user.id,'‚úÖ–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º!')

		else:
			try:
				await bot.send_message(message.from_user.id,parsName)
			except:
				await message.reply('‚ùå–¢–∞–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç,–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
				await state.finish()

		print('list id1:', agentsID," ")
		print('Updated list:', parsID," ")
		print("Number of elements in the list: ",get_number_of_elements(agentsID))

		#if (get_number_of_elements(agentsID))





#–ü—Ä–∏–Ω—è—Ç—å –æ–¥–Ω–æ —Ñ–∏–æ –∏–∑ –∫–Ω–æ–ø–∫–∏ 
#–°–æ—Å—Ç–æ—è–Ω–∏–µ 2
async def card_view(message: types.Message, state: FSMContext):

	#–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ (–∫–Ω–æ–ø–∫–∏)
	keyboardBack = types.ReplyKeyboardMarkup(resize_keyboard=True)
	buttonsFind = ["–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"]
	buttonsBack = ["–ú–µ–Ω—é"]

	keyboardBack.add(*buttonsFind).add(*buttonsBack)

	fullName = message.text

	append_client_info(message.from_user.id, "A", fullName, True)

	# fullname –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å

	url = "https://rinh-api.kovalev.team/employee/surname/"
	result = requests.get(url + fullName)

	employeeData = json.loads(result.content)

	#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –∏–ª–∏ –Ω–µ –≤–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if (len(employeeData) == 0):
		await message.reply('‚ùå–ë—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboardBack)
		async with state.proxy() as data:
			await state.finish()
		return;
	

	employeeId = employeeData[0]["id"]

	employee_url = "https://rinh-api.kovalev.team/statistic/employee/findByEmployeeId?employeeId="
	result = requests.get(employee_url + str(employeeId))

	resultJson = json.loads(result.content)


	data = resultJson["employee"]
	wos = resultJson["dataTable"][0]
	scopus = resultJson["dataTable"][1]
	rinz = resultJson["dataTable"][2]
	# articlesData —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ articlesData.articlesCount - –æ—à–∏–±–∫–∞

	articlesCount = wos["articlesCount"]

	parsID = "";
	countP = 0;

	avatarUrl = data["avatarUrl"]
	parsName = "–ò–Ω–∏—Ü–∏–∞–ª—ã: " + str(data["fullName"])

	#—Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø–∏—Å–∫–∏ degree title department
	degree_url='https://rinh-api.kovalev.team/academic/degree/'
	title_url='https://rinh-api.kovalev.team/academic/title/'
	department_url='https://rinh-api.kovalev.team/department/'

	resultData =  {
		#"Id: ": data["id"],
		#"–£—á–µ–Ω–æ–µ –∑–≤–∞–Ω–∏–µ: ": data["academicTitleId"],
		#"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ": data["positionId"],
		"–û–±—â–∏–π —Å—Ç–∞–∂: ": data["commonWorkExperience"],
		"–°—Ç–∞–∂ –ø–æ —Å–ø–µ—Ü: ": data["specialtyWorkExperience"],
		"–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π –≤ Wos: ": wos["articlesCount"],
		"–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π –≤ Scopus: ": scopus["articlesCount"],
		"–ö–æ–ª-–≤–æ —Å—Ç–∞—Ç–µ–π –≤ Elibrary: ": rinz["articlesCount"],
		"Email: ": data["email"],
		"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ": data["phone"]
	}

	resultDataDegree = {}
	resultDataTitle = {}
	resultDataDepartment = {}

	#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É

	if (data["positionId"] is not None):
		department = requests.get(department_url + str(data["positionId"]))

		print(department.content)

		resultJsonDepartment = json.loads(department.content)

		resultDataDepartment["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: "] = resultJsonDepartment["shortName"];

	if (data["academicTitleId"] is not None):
		title = requests.get(title_url + str(data["academicTitleId"]))

		print(title.content)

		resultJsonTitle = json.loads(title.content)

		resultDataTitle["–£—á–µ–Ω–æ–µ –∑–≤–∞–Ω–∏–µ: "] = resultJsonTitle["name"];

	if (data["academicDegreeId"] is not None):
		degree = requests.get(degree_url + str(data["academicDegreeId"]))

		print(degree.content)

		resultJsonDegree = json.loads(degree.content)

		resultDataDegree["–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: "] = resultJsonDegree["shortName"];


	if (data["academicDegree2Id"] is not None):
		degree = requests.get(degree_url + str(data["academicDegree2Id"]))

		print(degree.content)
		
		resultJsonDegree = json.loads(degree.content)

		resultDataDegree["–í—Ç–æ—Ä–∞—è —É—á–µ–Ω–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: "] = resultJsonDegree["shortName"];

	#–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	replyMessage = "";
	replyMessageDegree = "";
	replyMessageTitle = "";
	replyMessageDepartment = "";

	for key in resultData.keys():
		if (resultData[key] is not None):
			replyMessage += key + str(resultData[key]) + "\n"\

	for key in resultDataTitle.keys():
		if (resultDataTitle[key] is not None):
			replyMessageTitle += key + str(resultDataTitle[key]) + "\n"

	for key in resultDataDepartment.keys():
		if (resultDataDepartment[key] is not None):
			replyMessageDepartment += key + str(resultDataDepartment[key]) + "\n"

	for key in resultDataDegree.keys():
		if (resultDataDegree[key] is not None):
			replyMessageDegree += key + str(resultDataDegree[key]) + "\n"
	#–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
	inScienceUrl ='https://inscience.kovalev.team/institutes/user/'+str(data["id"])
	stankinUrl = str(data["authorUrlProfile"])
	scopusUrl ='https://www.scopus.com/authid/detail.uri?authorId='+str(data["scopusAuthorId"])
	wosUrl ='https://www.webofscience.com/wos/author/record/'+str(data["wosAuthorId"])
	rinzUrl = 'https://www.elibrary.ru/author_items.asp?authorid='+str(data["rinzAuthorId"])

	#–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏+(—Ñ–æ—Ç–æ)
	try:
		media = types.MediaGroup()	
		media.attach_photo(avatarUrl, " \n"+
			"\n–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚öõÔ∏èüí´"+
			"\n\n"+
			parsName+
			"\n\n"+
			replyMessageDegree+
			replyMessageDepartment+
			replyMessageTitle+
			"\n"+
			replyMessage
		)

		await bot.send_media_group(message.from_user.id, media=media)
		await bot.send_message(message.from_user.id,'‚úîÔ∏è–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!', reply_markup=keyboardBack)
	except:
		#–í—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏(–±–µ–∑ —Ñ–æ—Ç–æ)
		await message.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚öõüí´"+
			"\n\n"+
			parsName+
			"\n\n"+
			replyMessageDegree+
			replyMessageDepartment+
			replyMessageTitle+
			"\n"+
			replyMessage,
			reply_markup=keyboardBack
		)

	#–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
	inlineKb = types.InlineKeyboardMarkup(resize_keyboard=True)
	
	btn_inScienceUrl= types.InlineKeyboardButton(text='inScience', url=inScienceUrl)
	btn_stankinUrl= types.InlineKeyboardButton(text='–°—Ç–∞–Ω–∫–∏–Ω', url=stankinUrl)
	btn_Wos = types.InlineKeyboardButton(text='Wos', url=wosUrl)
	btn_Scopus= types.InlineKeyboardButton(text='Scopus',url=scopusUrl)
	btn_Rinz= types.InlineKeyboardButton(text='Elibrary',  url=rinzUrl)

	inlineKb.row(btn_inScienceUrl).row(btn_stankinUrl).row(btn_Wos).row(btn_Scopus).row(btn_Rinz)

	await bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ã —Å—Ç–∞—Ç–µ–π.", reply_markup = inlineKb)

	await bot.send_document(chat_id=message.chat.id, document=open("goal_data\\" + str(message.from_user.id) + ".xlsx", "rb"))

	await FSMAdmin.next()
	#–ó–∞–∫–æ–Ω—á–∏—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
	async with state.proxy() as data:
		await state.finish()

async def cmGoal_start(message : types.Message):
	await FSMAdminGoal.goal.set()
	await message.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ –∫–∞–∫–æ–π —Ü–µ–ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫:',reply_markup=types.ReplyKeyboardRemove())
	
async def goal_Find(message : types.Message, state: FSMContext):
	async with state.proxy() as data:
		
		keyboardBack = types.ReplyKeyboardMarkup(resize_keyboard=True)
		buttonsBack = ["–ú–µ–Ω—é"]
		keyboardBack.add(*buttonsBack)

		data['name'] = message.text
		if message.text.isdigit():
			await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', reply_markup=keyboardBack)
			await state.finish()
			return
		print(message.text)

		file_path = "goal_data\\" + str(message.from_user.id) + ".xlsx"

		if (os.path.exists(file_path) is not True):
			await bot.send_message(message.from_user.id,"–§–∞–π–ª —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboardBack)
			await state.finish()
			return

		wb = openpyxl.load_workbook(file_path, read_only=True)
		ws = wb.active

		result_is_empty = True
		result = "–ë—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n"

		for row in ws.iter_rows(2):
			for cell in row:
				if cell.value == message.text:

					found = ws.cell(row=cell.row, column=1).value

					if (found is not None):
						result_is_empty = False
						result += found + "\n";

		wb.close()

		if (result_is_empty):
			result = "–ó–∞–ø—Ä–æ—Å—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã"

		await bot.send_message(message.from_user.id, result, reply_markup=keyboardBack)

		await FSMAdmin.next()

	await FSMAdminGoal.next()
	#–ó–∞–∫–æ–Ω—á–∏—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
	async with state.proxy() as data:
		await state.finish()

async def cmDelete_start(message : types.Message):
	await FSMAdminDelete.delete.set()
	await message.reply('–í–≤–µ–¥–∏—Ç–µ ‚Ññ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:',reply_markup=types.ReplyKeyboardRemove())
	
async def delete_Find(message : types.Message, state: FSMContext):
	async with state.proxy() as data:
		
		keyboardBack = types.ReplyKeyboardMarkup(resize_keyboard=True)
		buttonsBack = ["–ú–µ–Ω—é"]
		keyboardBack.add(*buttonsBack)

		data['name'] = message.text

		file_path = "goal_data\\" + str(message.from_user.id) + ".xlsx"

		if (os.path.exists(file_path) is not True):
			await bot.send_message(message.from_user.id,"–§–∞–π–ª —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=keyboardBack)
			await state.finish()
			return

		wb = openpyxl.load_workbook(file_path)

		try: 

			ws = wb.active

			row_ind = None

			try:

				row_ind = int(message.text)

			except Exception as ex:
				print(ex)
				await bot.send_message(message.from_user.id,"–ó–Ω–∞—á–µ–Ω–∏–µ-"+ message.text+"-—è–≤–ª—è–µ—Ç—Å—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–µ", reply_markup=keyboardBack)
				await state.finish()
				return

			if (row_ind == 1):
				await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∏–Ω–∞—è —Å 2", reply_markup=keyboardBack)
				await state.finish()
				return

			ws.delete_rows(row_ind)

			wb.save(file_path)

			await bot.send_message(message.from_user.id,"‚úÖ–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É–ø–µ—à–Ω–æ, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∞–π–ª", reply_markup=keyboardBack)
			await bot.send_document(chat_id=message.chat.id, document=open("goal_data\\" + str(message.from_user.id) + ".xlsx", "rb"))

		finally:
			wb.close();

	await FSMAdminDelete.next()
	#–ó–∞–∫–æ–Ω—á–∏—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
	async with state.proxy() as data:
		await state.finish()

#–†–µ–≥–∏—Å—Ç—Ä —Ö–µ–Ω–¥–æ–≤
def register_handlers_agentsInfo(dp : Dispatcher):
	dp.register_message_handler(cm_start, lambda message: message.text == "–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
	dp.register_message_handler(cmGoal_start, lambda message: message.text == "–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–ª–∏")
	dp.register_message_handler(cmDelete_start, lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å - —Ü–µ–ª—å –ø–æ –∏–Ω–¥–µ–∫—Å—É")
	dp.register_message_handler(command_start, lambda message: message.text == "–ú–µ–Ω—é")
	dp.register_message_handler(delete_Find, state=FSMAdminDelete.delete)
	dp.register_message_handler(goal_Find, state=FSMAdminGoal.goal)
	dp.register_message_handler(select_goal, state=FSMAdmin.goal)
	dp.register_message_handler(select_agent, state=FSMAdmin.name)
	dp.register_message_handler(card_view, state=FSMAdmin.card_view)
	# dp.register_message_handler(select_agentNum, state=FSMAdmin.num)
	# dp.register_message_handler()
#–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
